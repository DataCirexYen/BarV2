// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import {ReceiverValidator, ILiFi} from "../src/receiverValidator.sol";

contract ReceiverValidatorTest is Test {
    address private constant EXPECTED_RECEIVER = 0x7E6eBc13E2703834b2724Ca6E8CC85E253a33207;
    address private constant ALT_RECEIVER = 0x000000000000000000000000000000000000dEaD;
    address private constant BASE_USDC = 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913;

    bytes private constant JUMPER_CALL_DATA =hex"9e75aa95000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000400f8d655a42d1f96ed5260b08a1440c37edd1e4ebb558f9802dada365d154e23b0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000007e6ebc13e2703834b2724ca6e8cc85e253a3320700000000000000000000000000000000000000000000000000000000000bd8ca000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000365636f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000086c6966692d617069000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000a6d96e7f4d7b96cfe42185df61e64d255c12dff0000000000000000000000000a6d96e7f4d7b96cfe42185df61e64d255c12dff000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000be06300000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000084eedd56e1000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000799000000000000000000000000b9c0de368bece5e76b52545a8e377a4c118f597b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000101c1d5521dc32115089d02774f5298df13dc71f000000000000000000000000000000000000000000000000000000006902963700000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008b9133cbb70bc67b2c9c007bb81eb41d3926a6460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000000200349d077451bb0e3d74a3f7e94fddf10e5973889852585b2691a1034452cfce0000000000000000000000000000000000000000000000000000000006902811d000000000000000000000000399dbd5df04f83103f77a58cba2b7c4d3cdede97000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000004355200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000007e6ebc13e2703834b2724ca6e8cc85e253a33207000000000000000000000000000000000000000000000000000000000004355200000000000000000000000000000000000000000000000000000000";
    ReceiverValidator private validator;

    function setUp() public {
        validator = new ReceiverValidator(EXPECTED_RECEIVER);
    }

    function testValidateReceiverAcceptsKnownData() public view {
        assertTrue(validator.validateReceiver(JUMPER_CALL_DATA), "call data should validate for pinned receiver");
    }

    function testValidateReceiverRejectsMismatchedReceiver() public view {
        bytes memory data = JUMPER_CALL_DATA;
        (bytes4 selector, bytes memory params) = _splitSelectorAndParams(data);

        ILiFi.BridgeData memory bridgeData = abi.decode(params, (ILiFi.BridgeData));
        assertEq(bridgeData.sendingAssetId, BASE_USDC, "fixture sending asset mismatch");
        assertEq(bridgeData.receiver, EXPECTED_RECEIVER, "fixture call data receiver mismatch");

        bridgeData.receiver = ALT_RECEIVER;
        bytes memory mutated = abi.encodeWithSelector(selector, bridgeData);

        assertFalse(validator.validateReceiver(mutated), "call data with different receiver should be rejected");
    }

    function _splitSelectorAndParams(bytes memory data) private pure returns (bytes4 selector, bytes memory params) {
        require(data.length >= 4, "ReceiverValidatorTest: data too short");
        assembly {
            selector := mload(add(data, 32))
        }

        params = new bytes(data.length - 4);
        for (uint256 i; i < params.length; ++i) {
            params[i] = data[i + 4];
        }
    }
}
